import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var WPDependencyExtractionWebpackPlugin = require('@wordpress/dependency-extraction-webpack-plugin');

var packages = require('../assets/packages');

var WOOCOMMERCE_NAMESPACE = '@woocommerce/';
/**
 * Given a string, returns a new string with dash separators converted to
 * camelCase equivalent. This is not as aggressive as `_.camelCase` in
 * converting to uppercase, where Lodash will also capitalize letters
 * following numbers.
 *
 * @param {string} string Input dash-delimited string.
 *
 * @return {string} Camel-cased string.
 */

function camelCaseDash(string) {
  return string.replace(/-([a-z])/g, function (_, letter) {
    return letter.toUpperCase();
  });
}

var wooRequestToExternal = function wooRequestToExternal(request) {
  if (packages.includes(request)) {
    var handle = request.substring(WOOCOMMERCE_NAMESPACE.length);
    var irregularExternalMap = {
      'blocks-registry': ['wc', 'wcBlocksRegistry'],
      settings: ['wc', 'wcSettings']
    };

    if (irregularExternalMap[handle]) {
      return irregularExternalMap[handle];
    }

    return ['wc', camelCaseDash(handle)];
  }
};

var wooRequestToHandle = function wooRequestToHandle(request) {
  if (packages.includes(request)) {
    var handle = request.substring(WOOCOMMERCE_NAMESPACE.length);
    var irregularHandleMap = {
      data: 'wc-store-data',
      'csv-export': 'wc-csv'
    };

    if (irregularHandleMap[handle]) {
      return irregularHandleMap[handle];
    }

    return 'wc-' + handle;
  }
};

var DependencyExtractionWebpackPlugin = /*#__PURE__*/function (_WPDependencyExtracti) {
  _inherits(DependencyExtractionWebpackPlugin, _WPDependencyExtracti);

  var _super = _createSuper(DependencyExtractionWebpackPlugin);

  function DependencyExtractionWebpackPlugin() {
    _classCallCheck(this, DependencyExtractionWebpackPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(DependencyExtractionWebpackPlugin, [{
    key: "externalizeWpDeps",
    value: function externalizeWpDeps(_context, request, callback) {
      var externalRequest; // Handle via options.requestToExternal first

      if (typeof this.options.requestToExternal === 'function') {
        externalRequest = this.options.requestToExternal(request);
      } // Cascade to default if unhandled and enabled


      if (typeof externalRequest === 'undefined' && this.options.useDefaults) {
        externalRequest = wooRequestToExternal(request);
      }

      if (externalRequest) {
        this.externalizedDeps.add(request);
        return callback(null, externalRequest);
      } // Fall back to the WP method


      return _get(_getPrototypeOf(DependencyExtractionWebpackPlugin.prototype), "externalizeWpDeps", this).call(this, _context, request, callback);
    }
  }, {
    key: "mapRequestToDependency",
    value: function mapRequestToDependency(request) {
      // Handle via options.requestToHandle first
      if (typeof this.options.requestToHandle === 'function') {
        var scriptDependency = this.options.requestToHandle(request);

        if (scriptDependency) {
          return scriptDependency;
        }
      } // Cascade to default if enabled


      if (this.options.useDefaults) {
        var _scriptDependency = wooRequestToHandle(request);

        if (_scriptDependency) {
          return _scriptDependency;
        }
      } // Fall back to the WP method


      return _get(_getPrototypeOf(DependencyExtractionWebpackPlugin.prototype), "mapRequestToDependency", this).call(this, request);
    }
  }]);

  return DependencyExtractionWebpackPlugin;
}(WPDependencyExtractionWebpackPlugin);

module.exports = DependencyExtractionWebpackPlugin;
//# sourceMappingURL=index.js.map